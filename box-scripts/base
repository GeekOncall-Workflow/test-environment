#!/bin/bash

set -u
set -e

# The URL to our GitHub project
gitProject='https://github.com/devops-workflow'
# Clones from $gitProject are stored under this directory
gitDir='/root'
puppetEnvironment='production'

roles=$@
currentDir=$(pwd)

# Define some functions, which will be inherited by any subsequent scripts
Fail() {
  echo "$@"
  exit 1
}

# No, seriously.  Install this package
YumInstall() {
  package="$1"
set +e
  rpm -q "$package"
  result=$?
set -e
  if [ $result -ne 0 ]
  then
    yum --nogpgcheck -y install "$package"
  fi
}

AptInstall() {
  package="$1"
set +e
  dpkg -l "$package"
  result=$?
set -e
  if [ $result -ne 0 ]
  then
    apt-get -y install "$package"
  fi
}

# Creates the $gitDir if it doesn't exist, or it bombs if $gitDir is a
# non-directory file
if [ ! -d "$gitDir" ]
then
  if [ -e "$gitDir" ]
  then
    Fail "$gitDir exists, but it isn't a directory"
  else
    mkdir -p "$gitDir"
  fi
fi

# Get the latest from $gitProject/$1
PullProjectRepo() {
  repo="$1"
  gitPath="${gitProject}/${repo}.git"
  echo "Taking latest from $gitPath"
  if [ -d "${gitDir}/${repo}" ]
  then
    cd "${gitDir}/${repo}" && git pull
    cd "$currentDir"
  else
    git clone "$gitPath" "${gitDir}/${repo}"
  fi
}

Debian() {
  code_name=$(lsb_release -c | awk '{ print $NF}')
  if [ ! -f '/root/puppetlabs.gpg' ]
  then
    wget -q http://apt.puppetlabs.com/pubkey.gpg -O /root/puppetlabs.gpg
    apt-key add /root/puppetlabs.gpg
  fi
  if [ ! -f '/etc/apt/sources.list.d/puppetlabs.list' ]
  then
    echo "deb http://apt.puppetlabs.com ${code_name} dependencies main" > /etc/apt/sources.list.d/puppetlabs.list
    apt-get update
  fi
  AptInstall puppet-common
  AptInstall git
  puppet agent --enable
}

RedHat() {
# Add the Puppet repositories
  if [ ! -f '/etc/yum.repos.d/puppet.repo' ]
  then
    echo -e "[puppet-products]\nname=puppet-products\nbaseurl=http://yum.puppetlabs.com/el/\$releasever/products/\$basearch\ngpgcheck=0\nenabled=1" > /etc/yum.repos.d/puppet.repo
    echo -e "[puppet-dependencies]\nname=puppet-dependencies\nbaseurl=http://yum.puppetlabs.com/el/\$releasever/dependencies/\$basearch\ngpgcheck=0\nenabled=1" >> /etc/yum.repos.d/puppet.repo
  fi
# Install some things
  for i in 'git' 'puppet-3.8.1'
  do
    YumInstall "$i"
  done
}

# End of function definitions

# Try to determine which OS is running
if [ -f '/etc/debian_version' ]
then
  osfamily='Debian'
elif [ -f '/etc/redhat-release' ]
then
  osfamily='RedHat'
else
  osfamily='unsupported'
fi

# Run the function that corresponds to the detected OS
case $osfamily in
  RedHat)
    RedHat
  ;;
  Debian)
    Debian
  ;;
  *)
    Fail "Unsupported OS."
  ;;
esac

# Puppet should be installed now, so facter can be used
fqdn=$(facter fqdn)

# Verify that the "puppet" entry is in /etc/hosts, until DNS is used
set +e
grep -q ^10\.1\.1\.4 /etc/hosts
result=$?
set -e
if [ $result -ne 0 ]
then
  echo -e "10.1.1.4\tpuppet" >> /etc/hosts
fi

# Verify that $fqdn is in /etc/hosts.  This may happen if DHCP appends a
# domain to the Vagrant hostname, or if DNS is using funky wildcards
set +e
grep -q -w "$fqdn" /etc/hosts
result=$?
set -e
if [ $result -ne 0 ]
then
  sed -i "s/^\(127.0.0.1\)\s*\(.*\)/\1\t$fqdn\ \2/" /etc/hosts
fi
set -e

# Include any subsequent scripts that may have been passed
for role in ${roles[@]}
do
  echo "Including $role role"
  . /vagrant/box-scripts/${role}
done

# Finally, run Puppet
# It may be running already, or it may return non-zero.  Vagrant shouldn't care,
# so error checking's removed
set +e
puppet agent -t
set -e
